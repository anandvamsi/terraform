
what are modules
A Terraform module is a set of Terraform configuration files in a single directory. 
Even a simple configuration consisting of a single directory with one or more .tf files is a module.


Why do we need modules:-
* Organize configuration
* Encapsulate configuration
* Re-use configuration
* Provide consistency and ensure best practices


##what are different way we can load the modules;-
Local and remote modules
Modules can either be loaded from the local filesystem, or a remote source. 
Terraform supports a variety of remote sources, including the Terraform Registry, most version control systems, HTTP URLs, and
Terraform Cloud or Terraform Enterprise private module registrie


##Usecases of modules
1. Start writing your configuration with modules in mind. Even for modestly complex Terraform configurations managed by a single person, you'll find the benefits of using modules outweigh the time it takes to use them properly.
2. Use local modules to organize and encapsulate your code. Even if you aren't using or publishing remote modules, organizing your configuration in terms of modules from the beginning will significantlty reduce the burden of maintaining and updating your configuration as your infrastructure grows in complexity.
3. Use the public Terraform Registry to find useful modules. This way you can more quickly and confidently implement your configuration by relying on the work of others to implement common infrastructure scenarios.
4. Publish and share modules with your team. Most infrastructure is managed by a team of people, and modules are important way that teams can work together to create and maintain infrastructure. As mentioned earlier, you can publish modules either publicly or privately. We will see how to do this in a future guide in this series.


what are difference method to call modules
Local paths
Terraform Registry
GitHub
Generic Git, Mercurial repositories
Bitbucket
HTTP URLs
S3 buckets
GCS buckets


How do you access output variables from the modules
You can access them by referring
module.<MODULE NAME>.<OUTPUT NAME>
